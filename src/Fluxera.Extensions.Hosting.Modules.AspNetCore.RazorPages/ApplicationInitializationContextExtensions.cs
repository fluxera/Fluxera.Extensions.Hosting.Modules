namespace Fluxera.Extensions.Hosting.Modules.AspNetCore.RazorPages
{
	using System;
	using JetBrains.Annotations;
	using Microsoft.AspNetCore.Builder;
	using Microsoft.AspNetCore.ResponseCaching;

	/// <summary>
	///     Extension methods for the <see cref="IApplicationInitializationContext" /> type.
	/// </summary>
	[PublicAPI]
	public static class ApplicationInitializationContextExtensions
	{
		/// <summary>
		///     Captures synchronous and asynchronous <see cref="Exception" /> instances from the pipeline and generates HTML error
		///     responses.
		/// </summary>
		public static IApplicationInitializationContext UseDeveloperExceptionPage(this IApplicationInitializationContext context)
		{
			IApplicationBuilder app = context.GetApplicationBuilder();
			context.Log("UseDeveloperExceptionPage", _ => app.UseDeveloperExceptionPage());

			return context;
		}

		/// <summary>
		///     Adds a StatusCodePages middleware to the pipeline. Specifies that the response body should be generated by
		///     re-executing the request pipeline using an alternate path. This path may contain a '{0}' placeholder of the status
		///     code.
		/// </summary>
		public static IApplicationInitializationContext UseStatusCodePagesWithReExecute(this IApplicationInitializationContext context, string pathFormat)
		{
			IApplicationBuilder app = context.GetApplicationBuilder();
			context.Log("UseStatusCodePagesWithReExecute", _ => app.UseStatusCodePagesWithReExecute(pathFormat));

			return context;
		}

		/// <summary>
		///     Adds the <see cref="ResponseCachingMiddleware" /> for caching HTTP responses.
		/// </summary>
		public static IApplicationInitializationContext UseResponseCaching(this IApplicationInitializationContext context)
		{
			IApplicationBuilder app = context.GetApplicationBuilder();
			context.Log("UseResponseCaching", _ => app.UseResponseCaching());

			return context;
		}
	}
}
